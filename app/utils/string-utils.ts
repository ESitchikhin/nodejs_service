export const randomString = function (len = 8) {
	const chars = 'abdehkmnpswxzABDEFGHKMNPQRSTWXZ123456789';
	let str = '';

	for (let i = 0; i < len; i++) {
		const pos = Math.floor(Math.random() * chars.length);
		str += chars.substring(pos, pos + 1);
	}

	return str;
}

export const getStringWidth = function (str: string, fontSize: number): number {

	const charsWidthByFontSize = {
		18: {
			'32': 5,
			"43": 11,
			'48': 12,
			'49': 10,
			'50': 11,
			'51': 11,
			'52': 12,
			'53': 11,
			'54': 11,
			'55': 10,
			'56': 11,
			'57': 11,
			"65": 12,
			"66": 12,
			"67": 13,
			"68": 14,
			"69": 11,
			"70": 10,
			"71": 14,
			"72": 14,
			"73": 6,
			"74": 10,
			"75": 12,
			"76": 10,
			"77": 16,
			"78": 14,
			"79": 15,
			"80": 12,
			"81": 15,
			"82": 12,
			"83": 11,
			"84": 12,
			"85": 14,
			"86": 12,
			"87": 18,
			"88": 12,
			"89": 11,
			"90": 11,
			"97": 10,
			"98": 12,
			"99": 10,
			"100": 12,
			"101": 11,
			"102": 7,
			"103": 11,
			"104": 12,
			"105": 5,
			"106": 5,
			"107": 10,
			"108": 6,
			"109": 17,
			"110": 12,
			"111": 12,
			"112": 12,
			"113": 12,
			"114": 8,
			"115": 9,
			"116": 7,
			"117": 11,
			"118": 10,
			"119": 15,
			"120": 10,
			"121": 10,
			"122": 10,
			'160': 5,
			"1040": 12,
			"1041": 12,
			"1042": 12,
			"1043": 10,
			"1044": 14,
			"1045": 11,
			"1046": 17,
			"1047": 10,
			"1048": 14,
			"1049": 14,
			"1050": 12,
			"1051": 13,
			"1052": 16,
			"1053": 14,
			"1054": 15,
			"1055": 14,
			"1056": 12,
			"1057": 13,
			"1058": 12,
			"1059": 12,
			"1060": 16,
			"1061": 12,
			"1062": 14,
			"1063": 12,
			"1064": 19,
			"1065": 19,
			"1066": 13,
			"1067": 16,
			"1068": 11,
			"1069": 13,
			"1070": 20,
			"1071": 12,
			/*"1072": "а",
			"1073": "б",
			"1074": "в",
			"1075": "г",
			"1076": "д",
			"1077": "е",
			"1078": "ж",
			"1079": "з",
			"1080": "и",
			"1081": "й",
			"1082": "к",
			"1083": "л",
			"1084": "м",
			"1085": "н",
			"1086": "о",
			"1087": "п",
			"1088": "р",
			"1089": "с",
			"1090": "т",
			"1091": "у",
			"1092": "ф",
			"1093": ,
			"1094": "ц",
			"1095": "ч",
			"1096": "ш",
			"1097": "щ",
			"1098": "ъ",
			"1099": "ы",
			"1100": "ь",
			"1101": "э",
			"1102": "ю",
			"1103": "я"*/
		},
		24: {
			'32': 5,
			"43": 15,
			'48': 16,
			'49': 13,
			'50': 14,
			'51': 14,
			'52': 15,
			'53': 14,
			'54': 15,
			'55': 14,
			'56': 15,
			'57': 15,
			"65": 16,
			"66": 16,
			"67": 18,
			"68": 18,
			"69": 14,
			"70": 13,
			"71": 19,
			"72": 19,
			"73": 8,
			"74": 14,
			"75": 16,
			"76": 13,
			"77": 21,
			"78": 19,
			"79": 20,
			"80": 15,
			"81": 20,
			"82": 16,
			"83": 14,
			"84": 15,
			"85": 18,
			"86": 16,
			"87": 23,
			"88": 15,
			"89": 15,
			"90": 15,
			"97": 13,
			"98": 15,
			"99": 14,
			"100": 15,
			"101": 14,
			"102": 9,
			"103": 15,
			"104": 15,
			"105": 7,
			"106": 7,
			"107": 14,
			"108": 7,
			"109": 22,
			"110": 15,
			"111": 16,
			"112": 15,
			"113": 15,
			"114": 10,
			"115": 11,
			"116": 9,
			"117": 15,
			"118": 14,
			"119": 20,
			"120": 13,
			"121": 14,
			"122": 13,
			'160': 5,
			"1040": 16,
			"1041": 15,
			"1042": 16,
			"1043": 13,
			"1044": 18,
			"1045": 14,
			"1046": 23,
			"1047": 14,
			"1048": 19,
			"1049": 19,
			"1050": 16,
			"1051": 17,
			"1052": 21,
			"1053": 19,
			"1054": 20,
			"1055": 18,
			"1056": 15,
			"1057": 18,
			"1058": 15,
			"1059": 15,
			"1060": 21,
			"1061": 15,
			"1062": 19,
			"1063": 16,
			"1064": 25,
			"1065": 26,
			"1066": 17,
			"1067": 22,
			"1068": 15,
			"1069": 18,
			"1070": 26,
			"1071": 16,
			"1072": 13,
			"1073": 15,
			"1074": 13,
			"1075": 11,
			"1076": 15,
			"1077": 14,
			"1078": 19,
			"1079": 11,
			"1080": 15,
			"1081": 15,
			"1082": 14,
			"1083": 14,
			"1084": 18,
			"1085": 15,
			"1086": 16,
			"1087": 15,
			"1088": 15,
			"1089": 14,
			"1090": 12,
			"1091": 14,
			"1092": 18,
			"1093": 13,
			"1094": 15,
			"1095": 14,
			"1096": 20,
			"1097": 21,
			"1098": 14,
			"1099": 18,
			"1100": 13,
			"1101": 14,
			"1102": 21,
			"1103": 13
		},
		40: {
			'32': 7,
			"43": 24,
			"45": 22,
			'48': 26,
			'49': 21,
			'50': 24,
			'51': 23,
			'52': 25,
			'53': 23,
			'54': 25,
			'55': 22,
			'56': 25,
			'57': 25,
			"65": 27,
			"66": 26,
			"67": 29,
			"68": 30,
			"69": 23,
			"70": 21,
			"71": 31,
			"72": 31,
			"73": 13,
			"74": 22,
			"75": 26,
			"76": 22,
			"77": 35,
			"78": 31,
			"79": 33,
			"80": 25,
			"81": 33,
			"82": 26,
			"83": 23,
			"84": 25,
			"85": 30,
			"86": 27,
			"87": 39,
			"88": 25,
			"89": 25,
			"90": 25,
			"97": 22,
			"98": 25,
			"99": 22,
			"100": 25,
			"101": 23,
			"102": 15,
			"103": 25,
			"104": 25,
			"105": 11,
			"106": 11,
			"107": 22,
			"108": 12,
			"109": 37,
			"110": 25,
			"111": 26,
			"112": 25,
			"113": 25,
			"114": 16,
			"115": 19,
			"116": 15,
			"117": 25,
			"118": 22,
			"119": 34,
			"120": 21,
			"121": 22,
			"122": 21,
			'160': 7,
			"1040": 27,
			"1041": 25,
			"1042": 26,
			"1043": 21,
			"1044": 30,
			"1045": 23,
			"1046": 38,
			"1047": 23,
			"1048": 31,
			"1049": 31,
			"1050": 26,
			"1051": 28,
			"1052": 35,
			"1053": 31,
			"1054": 33,
			"1055": 30,
			"1056": 25,
			"1057": 29,
			"1058": 25,
			"1059": 25,
			"1060": 34,
			"1061": 25,
			"1062": 31,
			"1063": 27,
			"1064": 41,
			"1065": 43,
			"1066": 29,
			"1067": 36,
			"1068": 25,
			"1069": 29,
			"1070": 44,
			"1071": 26,
			"1072": 22,
			"1073": 24,
			"1074": 22,
			"1075": 17,
			"1076": 25,
			"1077": 23,
			"1078": 32,
			"1079": 19,
			"1080": 25,
			"1081": 25,
			"1082": 22,
			"1083": 23,
			"1084": 30,
			"1085": 25,
			"1086": 26,
			"1087": 25,
			"1088": 25,
			"1089": 22,
			"1090": 20,
			"1091": 22,
			"1092": 30,
			"1093": 21,
			"1094": 25,
			"1095": 22,
			"1096": 33,
			"1097": 34,
			"1098": 24,
			"1099": 30,
			"1100": 21,
			"1101": 22,
			"1102": 35,
			"1103": 22
		},
	}

	const defaultCharWidth = {
		18: 12,
		24: 15,
		40: 23,
	}

	const width = str.split('').reduce((width, char, index) => {
		const charCode = str.charCodeAt(index);
		const charWidth = charsWidthByFontSize[fontSize][charCode]
			? charsWidthByFontSize[fontSize][charCode]
			: defaultCharWidth[fontSize];
		return width + charWidth;
	}, 0);

	return width;
}

/**
 * Разделяет строку на массив строк, длина которой не больше заданного количества символов
 *
 * @param inputString
 * @param maxCount
 * @protected
 */
export const splitString = function(inputString: string, maxCount: number): string[] {
	const resultStringsArray: string[] = [];
	let currentString: string = '';
	let startNumber: number = 0;

	inputString.split(' ').forEach((word, number) => {
		if(number - startNumber > 0 && word.length + currentString.length + 1 > maxCount) {
			resultStringsArray.push(currentString);
			currentString = '';
			startNumber = number;
		}
		currentString += ((number - startNumber) === 0 ? '' : ' ') + word;
	});
	resultStringsArray.push(currentString);
	return resultStringsArray;
}

/**
 * Приводит строку к заданному падежу. str - исходная строка, choice - падеж
 * @param str
 * @param choice = "р" | "д" | "в" | "т" | "п"
 */
export const toCase = function(str, choice) {
	const strPub = { // правила для окончаний
			"а": ["ы", "е", "у", "ой", "е"],
			"(ш/ж/к/ч)а": ["%и", "%е", "%у", "%ой", "%е"],
			"б/в/м/г/д/л/ж/з/к/н/п/т/ф/ч/ц/щ/р/х": ["%а", "%у", "%а", "%ом", "%е"],
			"и": ["ей", "ям", "%", "ями", "ях"],
			"ый": ["ого", "ому", "%", "ым", "ом"],
			"й": ["я", "ю", "я", "ем", "е"],
			"о": ["а", "у", "%", "ом", "е"],
			"с/ш": ["%а", "%у", "%", "%ом", "%е"],
			"ы": ["ов", "ам", "%", "ами", "ах"],
			"ь": ["я", "ю", "я", "ем", "е"],
			"уль": ["ули", "уле", "улю", "улей", "уле"],
			"(ч/ш/д/т)ь": ["%и", "%и", "%ь", "%ью", "%и"],
			"я": ["и", "е", "ю", "ей", "е"]
		};
	const cases = { // номера для падежей, не считая Именительный
			"р": 0,
			"д": 1,
			"в": 2,
			"т": 3,
			"п": 4
		};
	const exs = { // исключения, сколько символов забирать с конца
			"ц": 2,
			"ок": 2
		}
	let lastIndex;
	let reformedStr;
	let forLong;
	let splitted;
	let groupped;
	let forPseudo;

	for (const i in strPub) {
		if (i.length > 1 && str.slice(-i.length) === i) { // для окончаний, длиной >1
			lastIndex = i;
			reformedStr = str.slice(0, -lastIndex.length);
			break;
		}
		else if (/[\(\)]+/g.test(i)) { // фича: группировка окончаний

			i.replace(/\(([^\(\)]+)\)([^\(\)]+)?/g, (a, b, c): string => {
				splitted = b.split("/");
				for (let o = 0; o < splitted.length; o++) {
					groupped = splitted[o] + c;
					strPub[groupped] = strPub[i];
					if (str.slice(-groupped.length) === groupped) {
						for (let x = 0, eachSplited = strPub[groupped]; x < eachSplited.length; x++) {
							eachSplited[x] = eachSplited[x].replace("%", splitted[o]);
						}
						reformedStr = str.slice(0, -groupped.length);
						forPseudo = groupped;
					}
				}
				return a
			})
		}
		else { // дефолт
			lastIndex = str.slice(-1);
			reformedStr = str.slice(0, -(forPseudo || lastIndex).length);
		}
		if (/\//.test(i) && !(/[\(\)]+/g.test(i)) && new RegExp(lastIndex).test(i)) forLong = i; // группированные окончания, разделающиеся слешем
		for (const o in exs) { // поиск исключений
			if (str.slice(-o.length) === o) reformedStr = str.slice(0, -exs[o]);
		}
	}
	return reformedStr + strPub[(forPseudo || forLong || lastIndex)][cases[choice]].replace("%", lastIndex)
}
